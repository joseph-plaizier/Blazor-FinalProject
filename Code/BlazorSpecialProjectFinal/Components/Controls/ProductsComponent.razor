@using BlazorSpecialProjectFinal.Objects
@using BlazorSpecialProjectFinal.Components
@inject IInventoryDbManagement InventoryDbManagement

@*
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@implements IAsyncDisposable
@inject IDbContextFactory<InventoryContext> DbFactory
    *@

@*<QuickGrid Items="context.Sweets" Pagination="pagination" Theme="corporate">
    <PropertyColumn Property="@(s => s.SweetId)" Sortable ="true" Title ="ID"/>
    <PropertyColumn Property="@(s => s.Name)" Sortable ="true" />
    <PropertyColumn Property="@(s => s.Description)" Sortable="true" />
    <PropertyColumn Property="@(s => s.Quantity)" Sortable="true"/>
    <PropertyColumn Property="@(s => s.Price)" Sortable ="true" />
</QuickGrid>

<Paginator State="pagination" />
*@

        @foreach(var sweet in sweets)
        {
        <tr>
            <td>@sweet.SweetId</td>
            <td>@sweet.Name</td>
            <td>@sweet.Description</td>
            <td>@sweet.Quantity</td>
            <td>@sweet.Price</td>
        </tr>
        }

@code {
    private List<Sweet>? sweets;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        sweets = InventoryDbManagement.GetSweets();

    }

    /*private InventoryContext context = default!;

    protected override void OnInitialized()
        {
        context = DbFactory.CreateDbContext();
    }


    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    */
}