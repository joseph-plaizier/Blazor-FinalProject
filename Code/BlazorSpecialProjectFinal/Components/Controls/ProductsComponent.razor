
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@implements IAsyncDisposable
@inject IDbContextFactory<InventoryContext> DbFactory

<QuickGrid Items="context.Sweets" class="table table-striped">
    @if (role)
    {
        <TemplateColumn Title="Purchase">
            <div>
                <a href="/purchaseProduct">Purchase</a>
            </div>
        </TemplateColumn>
    }
    else
    {
        <TemplateColumn Title="Edit">
            <div>
                <a href="/purchaseProduct">Edit</a>
            </div>
    </TemplateColumn>
    <TemplateColumn Title="Delete">

            <div>
                <a href="/purchaseProduct">Delete</a>
            </div>
    </TemplateColumn>
    }
    <PropertyColumn Property="@(s => s.SweetId)" Sortable ="true" />
    <PropertyColumn Property="@(s => s.Name)" Sortable="true" />
    <PropertyColumn Property="@(s => s.Description)" Sortable="true" />
    <PropertyColumn Property="@(s => s.Quantity)" Sortable ="true" />
    <PropertyColumn Property="@(s => s.Price)" Sortable="true" />

</QuickGrid>

<Paginator State="pagination" />


@code {

    ClaimsPrincipal User = new ClaimsPrincipal();

    [Parameter]
    public bool role { get; set; }

    private InventoryContext context = default!;
     
    protected override void OnInitialized()
        {
        context = DbFactory.CreateDbContext();

    }

    protected override void OnAfterRender(bool firstRender)
    {

    }


    protected override void OnParametersSet()
    {
        base.OnParametersSet();


    }


    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    
}